// QuizApp.jsx
import React, { useState } from 'react';
import Question from './Question'; // Import component Question
import Result from './Result';     // Import component Result

// Component QuizApp l√† component ch√≠nh qu·∫£n l√Ω to√†n b·ªô logic c·ªßa ·ª©ng d·ª•ng quiz.
const QuizApp = () => {
  // ƒê·ªãnh nghƒ©a c√°c c√¢u h·ªèi cho quiz.
  const initialQuestions = [
    {
      id: 1,
      question: "What is the capital of France?",
      options: ["Paris", "London", "Berlin", "Madrid"],
      answer: "Paris"
    },
    {
      id: 2,
      question: "What is the largest planet in our solar system?",
      options: ["Jupiter", "Saturn", "Mars", "Earth"],
      answer: "Jupiter"
    },
    {
      id: 3,
      question: "Which of these is a programming language?",
      options: ["HTML", "CSS", "Python", "JPEG"],
      answer: "Python"
    },
    {
      id: 4,
      question: "What is the chemical symbol for water?",
      options: ["O2", "H2O", "CO2", "N2"],
      answer: "H2O"
    },
    {
      id: 5,
      question: "Who painted the Mona Lisa?",
      options: ["Vincent van Gogh", "Pablo Picasso", "Leonardo da Vinci", "Claude Monet"],
      answer: "Leonardo da Vinci"
    }
  ];

  // Kh·ªüi t·∫°o c√°c state s·ª≠ d·ª•ng useState hook.
  const [questions, setQuestions] = useState(initialQuestions); // M·∫£ng c√¢u h·ªèi
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Ch·ªâ s·ªë c√¢u h·ªèi hi·ªán t·∫°i
  const [score, setScore] = useState(0);                     // ƒêi·ªÉm s·ªë
  const [quizEnd, setQuizEnd] = useState(false);             // Tr·∫°ng th√°i k·∫øt th√∫c quiz

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt ƒë√°p √°n.
  const handleAnswerOptionClick = (selectedOption) => {
    // L·∫•y d·ªØ li·ªáu c·ªßa c√¢u h·ªèi hi·ªán t·∫°i d·ª±a tr√™n ch·ªâ s·ªë.
    const currentQuestionData = questions[currentQuestionIndex];

    // Ki·ªÉm tra xem l·ª±a ch·ªçn c√≥ ƒë√∫ng kh√¥ng.
    if (selectedOption === currentQuestionData.answer) {
      // N·∫øu ƒë√∫ng, tƒÉng ƒëi·ªÉm s·ªë.
      setScore(prevScore => prevScore + 1);
    }

    // T√≠nh to√°n ch·ªâ s·ªë c·ªßa c√¢u h·ªèi ti·∫øp theo.
    const nextQuestionIndex = currentQuestionIndex + 1;

    // Ki·ªÉm tra xem c√≤n c√¢u h·ªèi n√†o n·ªØa kh√¥ng.
    if (nextQuestionIndex < questions.length) {
      // N·∫øu c√≤n, c·∫≠p nh·∫≠t ch·ªâ s·ªë c√¢u h·ªèi hi·ªán t·∫°i.
      setCurrentQuestionIndex(nextQuestionIndex);
    } else {
      // N·∫øu kh√¥ng c√≤n, ƒë·∫∑t tr·∫°ng th√°i quizEnd th√†nh true.
      setQuizEnd(true);
    }
  };

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng mu·ªën b·∫Øt ƒë·∫ßu l·∫°i quiz.
  const handleRestartQuiz = () => {
    // Reset t·∫•t c·∫£ c√°c state v·ªÅ gi√° tr·ªã ban ƒë·∫ßu.
    setCurrentQuestionIndex(0);
    setScore(0);
    setQuizEnd(false);
    // N·∫øu b·∫°n mu·ªën x√°o tr·ªôn c√¢u h·ªèi m·ªói khi ch∆°i l·∫°i, b·∫°n c√≥ th·ªÉ th√™m logic x√°o tr·ªôn ·ªü ƒë√¢y.
    // V√≠ d·ª•: setQuestions(shuffleArray(initialQuestions));
  };

  // L·∫•y d·ªØ li·ªáu c·ªßa c√¢u h·ªèi hi·ªán t·∫°i ƒë·ªÉ truy·ªÅn xu·ªëng component Question.
  const currentQuestion = questions[currentQuestionIndex];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center p-4 sm:p-6 lg:p-8 font-inter">
      <div className="bg-white rounded-3xl shadow-2xl p-6 sm:p-8 lg:p-10 w-full max-w-xl border border-blue-200 transform transition-all duration-300 ease-in-out hover:scale-[1.01]">
        <h1 className="text-4xl sm:text-5xl font-extrabold text-center text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-700 mb-8 drop-shadow-md">
          üß† Awesome Quiz! üöÄ
        </h1>

        {/* Logic hi·ªÉn th·ªã: N·∫øu quizEnd l√† true th√¨ hi·ªÉn th·ªã Result, ng∆∞·ª£c l·∫°i hi·ªÉn th·ªã Question. */}
        {quizEnd ? (
          // Hi·ªÉn th·ªã component Result khi quiz k·∫øt th√∫c.
          <Result
            score={score} // Truy·ªÅn ƒëi·ªÉm s·ªë hi·ªán t·∫°i
            totalQuestions={questions.length} // Truy·ªÅn t·ªïng s·ªë c√¢u h·ªèi
            onRestartQuiz={handleRestartQuiz} // Truy·ªÅn h√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i quiz
          />
        ) : (
          // Hi·ªÉn th·ªã component Question khi quiz ƒëang di·ªÖn ra.
          <>
            <div className="text-center mb-6 text-gray-700 font-semibold text-lg sm:text-xl">
              Question <span className="font-bold text-blue-600">{currentQuestionIndex + 1}</span> of <span className="font-bold text-purple-600">{questions.length}</span>
            </div>
            <Question
              question={currentQuestion.question}    // Truy·ªÅn n·ªôi dung c√¢u h·ªèi
              options={currentQuestion.options}      // Truy·ªÅn m·∫£ng c√°c l·ª±a ch·ªçn
              onAnswerClick={handleAnswerOptionClick} // Truy·ªÅn h√†m x·ª≠ l√Ω click ƒë√°p √°n
            />
            <div className="mt-8 text-center text-gray-600 text-sm sm:text-base">
                Current Score: <span className="font-bold text-green-600 text-lg">{score}</span>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default QuizApp;
